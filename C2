import os
import sys
import time
import string
import random
import threading
from pathlib import Path
from paramiko import ServerInterface, RSAKey, Transport
from socketserver import ThreadingTCPServer, BaseRequestHandler

import paramiko



class CustomSSHServerInterface(ServerInterface):

    def check_auth_password(self, username, password):
        user_table = read_user_table()
        if username in user_table and user_table[username] == password:
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED

    def get_allowed_auths(self, username):
        return 'password'

    def check_channel_exec_request(self, channel, command):
        username = channel.get_transport().get_username()
        data_file = Path(f"C:/Users/glenn/Desktop/iOS/C2/userdata/{username}_data.txt")


        with open(data_file, "a") as f:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"{timestamp}: {command.decode('utf-8')}\n")

        return True



class SSHRequestHandler(BaseRequestHandler):
    def handle(self):
        try:
            transport = Transport(self.request)
            transport.add_server_key(host_key)
            transport.start_server(server=CustomSSHServerInterface())
            channel = transport.accept()
        except Exception as e:
            print(f"Error: {e}")

def get_user_data(username):
    data_file = Path(f"C:/Users/glenn/Desktop/iOS/C2/userdata/{username}_data.txt")
    data = []

    if data_file.exists():
        with open(data_file, "r") as f:
            for line in f.readlines():
                timestamp, command = line.strip().split(": ", 1)
                data.append((timestamp, command))

    return data

def read_user_table():
    user_table_file = Path("C:/Users/glenn/Desktop/iOS/C2/user_table.txt")
    user_table = {}

    if user_table_file.exists():
        with open(user_table_file, "r") as f:
            for line in f.readlines():
                username, password = line.strip().split(":", 1)
                user_table[username] = password
    return user_table


def write_user_table(user_table):
    user_table_file = Path("C:/Users/glenn/Desktop/iOS/C2/user_table.txt")

    with open(user_table_file, "w") as f:
        for username, password in user_table.items():
            f.write(f"{username}:{password}\n")


def generate_random_string(length, charset):
    return "".join(random.choice(charset) for _ in range(length))

def manage_server_address():
    script_directory = os.path.dirname(os.path.realpath(__file__))
    config_file = Path(f"{script_directory}/config.txt")
    userdata_directory = Path(f"{script_directory}/userdata")

    if config_file.exists():
        with open(config_file, "r") as f:
            server_address = f.readline().strip().split(":", 1)
    else:
        server_address = ("192.168.50.120", 22)
        with open(config_file, "w") as f:
            f.write(f"{server_address[0]}:{server_address[1]}\n")

    while True:
        clear_screen()
        try:
            print(f"Script directory: {script_directory}")
            print(f"Config file location: {config_file}")
            print(f"User data directory: {userdata_directory}")
            print(f"\nCurrent server address: {server_address[0]}:{server_address[1]}")
            print("\n1. Change host address")
            print("2. Change port")
            print("3. Change config file location")
            print("4. Change user data directory")
            print("0. Exit")

            choice = input("\nEnter your choice: ")

            if choice == "1":
                new_host = input("\nEnter the new host address: ")
                server_address = (new_host, server_address[1])
            elif choice == "2":
                new_port = int(input("\nEnter the new port: "))
                server_address = (server_address[0], new_port)
            elif choice == "3":
                new_config_path = input("\nEnter the new config file location: ")
                config_file = Path(new_config_path)
            elif choice == "4":
                new_userdata_path = input("\nEnter the new user data directory: ")
                userdata_directory = Path(new_userdata_path)
            elif choice == "0":
                break
            else:
                print("Invalid choice. Please try again.")

            with open(config_file, "w") as f:
                f.write(f"{server_address[0]}:{server_address[1]}\n")
        except IndexError:
            print("Error reading server address from the config file. Please check the file format.")
            break

    return tuple(server_address)

def create_ssh_user():
    charset = string.ascii_letters + string.digits
    username = generate_random_string(12, charset)
    password = generate_random_string(64, charset)
    user_table = read_user_table()
    user_table[username] = password
    write_user_table(user_table)
    return username, password


def list_users():
    clear_screen()
    user_table = read_user_table()
    return list(user_table.items())


def clear_screen():
    if os.name == "nt":
        os.system("cls")
    else:
        os.system("clear")


def main():
    global host_key
    host_key = RSAKey.generate(bits=2048)
    server_address = ("localhost", 22)  #DEFAULT

    ssh_server = ThreadingTCPServer(server_address, SSHRequestHandler)
    ssh_server_thread = threading.Thread(target=ssh_server.serve_forever)
    ssh_server_thread.daemon = True
    ssh_server_thread.start()

    while True:
        clear_screen()
        print(""" 
               ▌▄▄▄   ▄▄▄▄▄▄▄▄▄▄   ▄▄▌            
                ▄ ███ ▀████████▌ ███ ▄             
             ▄██▀ ███▌          ▐███ ▀██▄          
           ▄██▀ ▄███▀ ▄████████▄ ▀███▄ ▀██▄       
         ▄███▀ ████ ▄████████████▄ ████ ▐███▄      
        ████▀ ████▌ ▀▀           ▀▀ ▐████ ▀████    
       ████   ██████▄▄██████████▄▄██████   ████   
      ████  █▌ ▀█████████▀▀▀▀█████████▀ ▄█  ████   
     ████  ▄███  ▐████▀        ▀████▌  ███▌  ███▌  
     ███▌  ███▌  ████            ████  ████  ████  
     ███▌  ███▌  ███▌            ▐███  ▐███  ████  
     ███▌  ███▌  ████            ████  ████  ████  
     ████  ▀███   ████▄        ▄███████▄▀█▌  ███▌  
      ████  ████▄  ▀█████▄▄▄▄█████▀ ████ ▀  ████   
       ████  ▀████▄  ▀▀████████▀▀  ▄████   ████   
        ████▄  ▀████▄▄          ▄▄████▀  ▄████    
         ▀████▄  ▀██████████████████▀  ▄████▀      
           ▀████▄    ▀▀▀██████▀▀▀   ▄▄████▀       
             ▀▀  ▄▀           ▄▄▄███████▀          
              ▄███▄█████████████████▀             
             █████████▀▀▀▀▀▀▀▀▀▀                  
            ████████▄                              
           ██▀                                    
                           
             """)
        print("iOS C2 Beta 2")
        print("       ")
        print("1. SSH User Generation")
        print("2. Display Users And Passwords")
        print("3. User Management")
        print("4. Listen For Incoming Traffic")
        print("5. SSH Server Managment")
        print("0. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            username, password = create_ssh_user()
            print(f"\nGenerated SSH user:\nUsername: {username}\nPassword: {password}")
            input("\nPress Enter to continue...")

        elif choice == "2":
            print("\nUsers and passwords:")
            for username, password in list_users():
                print(f"Username: {username}\nPassword: {password}\n")
            input("\nPress Enter to continue...")

        elif choice == "3":
            while True:
                clear_screen()
                print("\nUser management:")
                users = list_users()
                for i, (username, _) in enumerate(users, start=1):
                    print(f"{i}. {username}")

                print("0. Back")
                choice = input("Enter your choice: ")

                if choice == "0":
                    break

                index = int(choice) - 1
                if 0 <= index < len(users):
                    username, _ = users[index]
                    print(f"\nData sent by user {username}:")

                    for timestamp, command in get_user_data(username):
                        print(f"{timestamp}: {command}")

                    input("\nPress Enter to continue...")
        elif choice == "4":
            print("\nListening for incoming traffic...")
            print("Type 'back' to return to the main menu.")
            while True:
                command = input()
                if command.lower() == "back":
                    break
        elif choice == "5":
            server_address = manage_server_address()
            ssh_server.server_address = server_address
        elif choice == "0":
            break

if __name__ == "__main__":
    main()
